// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/app/store/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=./internal/app/store/interfaces.go -destination=./mocks/mocks.go
//

// Package mock_store is a generated GoMock package.
package mock_store

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorageGet is a mock of StorageGet interface.
type MockStorageGet struct {
	ctrl     *gomock.Controller
	recorder *MockStorageGetMockRecorder
	isgomock struct{}
}

// MockStorageGetMockRecorder is the mock recorder for MockStorageGet.
type MockStorageGetMockRecorder struct {
	mock *MockStorageGet
}

// NewMockStorageGet creates a new mock instance.
func NewMockStorageGet(ctrl *gomock.Controller) *MockStorageGet {
	mock := &MockStorageGet{ctrl: ctrl}
	mock.recorder = &MockStorageGetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageGet) EXPECT() *MockStorageGetMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockStorageGet) Get(ctx context.Context, key string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageGetMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorageGet)(nil).Get), ctx, key)
}

// MockStorageList is a mock of StorageList interface.
type MockStorageList struct {
	ctrl     *gomock.Controller
	recorder *MockStorageListMockRecorder
	isgomock struct{}
}

// MockStorageListMockRecorder is the mock recorder for MockStorageList.
type MockStorageListMockRecorder struct {
	mock *MockStorageList
}

// NewMockStorageList creates a new mock instance.
func NewMockStorageList(ctrl *gomock.Controller) *MockStorageList {
	mock := &MockStorageList{ctrl: ctrl}
	mock.recorder = &MockStorageListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageList) EXPECT() *MockStorageListMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockStorageList) List(ctx context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStorageListMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStorageList)(nil).List), ctx)
}

// MockStoragePing is a mock of StoragePing interface.
type MockStoragePing struct {
	ctrl     *gomock.Controller
	recorder *MockStoragePingMockRecorder
	isgomock struct{}
}

// MockStoragePingMockRecorder is the mock recorder for MockStoragePing.
type MockStoragePingMockRecorder struct {
	mock *MockStoragePing
}

// NewMockStoragePing creates a new mock instance.
func NewMockStoragePing(ctrl *gomock.Controller) *MockStoragePing {
	mock := &MockStoragePing{ctrl: ctrl}
	mock.recorder = &MockStoragePingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoragePing) EXPECT() *MockStoragePingMockRecorder {
	return m.recorder
}

// Ping mocks base method.
func (m *MockStoragePing) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStoragePingMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStoragePing)(nil).Ping), ctx)
}

// MockStorageSet is a mock of StorageSet interface.
type MockStorageSet struct {
	ctrl     *gomock.Controller
	recorder *MockStorageSetMockRecorder
	isgomock struct{}
}

// MockStorageSetMockRecorder is the mock recorder for MockStorageSet.
type MockStorageSetMockRecorder struct {
	mock *MockStorageSet
}

// NewMockStorageSet creates a new mock instance.
func NewMockStorageSet(ctrl *gomock.Controller) *MockStorageSet {
	mock := &MockStorageSet{ctrl: ctrl}
	mock.recorder = &MockStorageSetMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageSet) EXPECT() *MockStorageSetMockRecorder {
	return m.recorder
}

// Set mocks base method.
func (m *MockStorageSet) Set(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStorageSetMockRecorder) Set(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorageSet)(nil).Set), ctx, key, value)
}

// MockStorageSetMultiple is a mock of StorageSetMultiple interface.
type MockStorageSetMultiple struct {
	ctrl     *gomock.Controller
	recorder *MockStorageSetMultipleMockRecorder
	isgomock struct{}
}

// MockStorageSetMultipleMockRecorder is the mock recorder for MockStorageSetMultiple.
type MockStorageSetMultipleMockRecorder struct {
	mock *MockStorageSetMultiple
}

// NewMockStorageSetMultiple creates a new mock instance.
func NewMockStorageSetMultiple(ctrl *gomock.Controller) *MockStorageSetMultiple {
	mock := &MockStorageSetMultiple{ctrl: ctrl}
	mock.recorder = &MockStorageSetMultipleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageSetMultiple) EXPECT() *MockStorageSetMultipleMockRecorder {
	return m.recorder
}

// SetMultiple mocks base method.
func (m *MockStorageSetMultiple) SetMultiple(ctx context.Context, l map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMultiple", ctx, l)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMultiple indicates an expected call of SetMultiple.
func (mr *MockStorageSetMultipleMockRecorder) SetMultiple(ctx, l any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMultiple", reflect.TypeOf((*MockStorageSetMultiple)(nil).SetMultiple), ctx, l)
}

// MockStorageDelete is a mock of StorageDelete interface.
type MockStorageDelete struct {
	ctrl     *gomock.Controller
	recorder *MockStorageDeleteMockRecorder
	isgomock struct{}
}

// MockStorageDeleteMockRecorder is the mock recorder for MockStorageDelete.
type MockStorageDeleteMockRecorder struct {
	mock *MockStorageDelete
}

// NewMockStorageDelete creates a new mock instance.
func NewMockStorageDelete(ctrl *gomock.Controller) *MockStorageDelete {
	mock := &MockStorageDelete{ctrl: ctrl}
	mock.recorder = &MockStorageDeleteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageDelete) EXPECT() *MockStorageDeleteMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStorageDelete) Delete(ctx context.Context, l []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, l)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageDeleteMockRecorder) Delete(ctx, l any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorageDelete)(nil).Delete), ctx, l)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStorage) Delete(ctx context.Context, l []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, l)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockStorageMockRecorder) Delete(ctx, l any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorage)(nil).Delete), ctx, l)
}

// Get mocks base method.
func (m *MockStorage) Get(ctx context.Context, key string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), ctx, key)
}

// List mocks base method.
func (m *MockStorage) List(ctx context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStorageMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStorage)(nil).List), ctx)
}

// Ping mocks base method.
func (m *MockStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStorageMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorage)(nil).Ping), ctx)
}

// Set mocks base method.
func (m *MockStorage) Set(ctx context.Context, key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStorageMockRecorder) Set(ctx, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStorage)(nil).Set), ctx, key, value)
}

// SetMultiple mocks base method.
func (m *MockStorage) SetMultiple(ctx context.Context, l map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMultiple", ctx, l)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMultiple indicates an expected call of SetMultiple.
func (mr *MockStorageMockRecorder) SetMultiple(ctx, l any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMultiple", reflect.TypeOf((*MockStorage)(nil).SetMultiple), ctx, l)
}
